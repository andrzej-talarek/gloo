syntax = "proto3";
package als.options.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/als";


import "extproto/ext.proto";option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "validate/validate.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/type/v3/percent.proto";

import "google/protobuf/struct.proto";

// Contains various settings for Envoy's access logging service.
// See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/accesslog/v2/accesslog.proto#envoy-api-msg-config-filter-accesslog-v2-accesslog
message AccessLoggingService {
    repeated AccessLog access_log = 1;
}

message AccessLog {
    // type of Access Logging service to implement
    oneof OutputDestination {
        // Output access logs to local file
        FileSink file_sink = 2;
        // Send access logs to gRPC service
        GrpcService grpc_service = 3;
    }
    // Filter which is used to determine if the access log needs to be written.
    AccessLogFilter filter = 4;
}

message FileSink {
    // the file path to which the file access logging service will sink
    string path = 1;
    // the format which the logs should be outputted by
    oneof output_format {
        // the format string by which envoy will format the log lines
        // https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/observability/access_log#config-access-log-format-strings
        string string_format = 2;
        // the format object by which to envoy will emit the logs in a structured way.
        // https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/observability/access_log#format-dictionaries
        google.protobuf.Struct json_format = 3;
    }
}

message GrpcService {
    // name of log stream
    string log_name = 1;
    // The static cluster defined in bootstrap config to route to
    oneof service_ref {
        string static_cluster_name = 2;
    }

    repeated string additional_request_headers_to_log = 4;

    repeated string additional_response_headers_to_log = 5;

    repeated string additional_response_trailers_to_log = 6;
}

message AccessLogFilter {
    oneof filter_specifier {
      option (validate.required) = true;
      // Runtime filter.
      RuntimeFilter runtime_filter = 5;
    }
  }

// Filters for random sampling of requests.
message RuntimeFilter {  
    // Runtime key to get an optional overridden numerator for use in the
    // ``percent_sampled`` field. If found in runtime, this value will replace the
    // default numerator.
    string runtime_key = 1 [(validate.rules).string = {min_len: 1}];
  
    // The default sampling percentage. If not specified, defaults to 0% with
    // denominator of 100.
    .solo.io.envoy.type.v3.FractionalPercent percent_sampled = 2;

    // By default, sampling pivots on the header
    // :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being
    // present. If :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`
    // is present, the filter will consistently sample across multiple hosts based
    // on the runtime key value and the value extracted from
    // :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is
    // missing, or ``use_independent_randomness`` is set to true, the filter will
    // randomly sample based on the runtime key value alone.
    // ``use_independent_randomness`` can be used for logging kill switches within
    // complex nested :ref:`AndFilter
    // <envoy_v3_api_msg_config.accesslog.v3.AndFilter>` and :ref:`OrFilter
    // <envoy_v3_api_msg_config.accesslog.v3.OrFilter>` blocks that are easier to
    // reason about from a probability perspective (i.e., setting to true will
    // cause the filter to behave like an independent random variable when
    // composed within logical operator filters).
    bool use_independent_randomness = 3;
  }

