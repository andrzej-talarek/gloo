// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/als/als.proto

package als

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_struct "github.com/golang/protobuf/ptypes/struct"

	github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_type_v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/type/v3"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *AccessLoggingService) Clone() proto.Message {
	var target *AccessLoggingService
	if m == nil {
		return target
	}
	target = &AccessLoggingService{}

	if m.GetAccessLog() != nil {
		target.AccessLog = make([]*AccessLog, len(m.GetAccessLog()))
		for idx, v := range m.GetAccessLog() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.AccessLog[idx] = h.Clone().(*AccessLog)
			} else {
				target.AccessLog[idx] = proto.Clone(v).(*AccessLog)
			}

		}
	}

	return target
}

// Clone function
func (m *AccessLog) Clone() proto.Message {
	var target *AccessLog
	if m == nil {
		return target
	}
	target = &AccessLog{}

	if h, ok := interface{}(m.GetFilter()).(clone.Cloner); ok {
		target.Filter = h.Clone().(*AccessLogFilter)
	} else {
		target.Filter = proto.Clone(m.GetFilter()).(*AccessLogFilter)
	}

	switch m.OutputDestination.(type) {

	case *AccessLog_FileSink:

		if h, ok := interface{}(m.GetFileSink()).(clone.Cloner); ok {
			target.OutputDestination = &AccessLog_FileSink{
				FileSink: h.Clone().(*FileSink),
			}
		} else {
			target.OutputDestination = &AccessLog_FileSink{
				FileSink: proto.Clone(m.GetFileSink()).(*FileSink),
			}
		}

	case *AccessLog_GrpcService:

		if h, ok := interface{}(m.GetGrpcService()).(clone.Cloner); ok {
			target.OutputDestination = &AccessLog_GrpcService{
				GrpcService: h.Clone().(*GrpcService),
			}
		} else {
			target.OutputDestination = &AccessLog_GrpcService{
				GrpcService: proto.Clone(m.GetGrpcService()).(*GrpcService),
			}
		}

	}

	return target
}

// Clone function
func (m *FileSink) Clone() proto.Message {
	var target *FileSink
	if m == nil {
		return target
	}
	target = &FileSink{}

	target.Path = m.GetPath()

	switch m.OutputFormat.(type) {

	case *FileSink_StringFormat:

		target.OutputFormat = &FileSink_StringFormat{
			StringFormat: m.GetStringFormat(),
		}

	case *FileSink_JsonFormat:

		if h, ok := interface{}(m.GetJsonFormat()).(clone.Cloner); ok {
			target.OutputFormat = &FileSink_JsonFormat{
				JsonFormat: h.Clone().(*github_com_golang_protobuf_ptypes_struct.Struct),
			}
		} else {
			target.OutputFormat = &FileSink_JsonFormat{
				JsonFormat: proto.Clone(m.GetJsonFormat()).(*github_com_golang_protobuf_ptypes_struct.Struct),
			}
		}

	}

	return target
}

// Clone function
func (m *GrpcService) Clone() proto.Message {
	var target *GrpcService
	if m == nil {
		return target
	}
	target = &GrpcService{}

	target.LogName = m.GetLogName()

	if m.GetAdditionalRequestHeadersToLog() != nil {
		target.AdditionalRequestHeadersToLog = make([]string, len(m.GetAdditionalRequestHeadersToLog()))
		for idx, v := range m.GetAdditionalRequestHeadersToLog() {

			target.AdditionalRequestHeadersToLog[idx] = v

		}
	}

	if m.GetAdditionalResponseHeadersToLog() != nil {
		target.AdditionalResponseHeadersToLog = make([]string, len(m.GetAdditionalResponseHeadersToLog()))
		for idx, v := range m.GetAdditionalResponseHeadersToLog() {

			target.AdditionalResponseHeadersToLog[idx] = v

		}
	}

	if m.GetAdditionalResponseTrailersToLog() != nil {
		target.AdditionalResponseTrailersToLog = make([]string, len(m.GetAdditionalResponseTrailersToLog()))
		for idx, v := range m.GetAdditionalResponseTrailersToLog() {

			target.AdditionalResponseTrailersToLog[idx] = v

		}
	}

	switch m.ServiceRef.(type) {

	case *GrpcService_StaticClusterName:

		target.ServiceRef = &GrpcService_StaticClusterName{
			StaticClusterName: m.GetStaticClusterName(),
		}

	}

	return target
}

// Clone function
func (m *AccessLogFilter) Clone() proto.Message {
	var target *AccessLogFilter
	if m == nil {
		return target
	}
	target = &AccessLogFilter{}

	switch m.FilterSpecifier.(type) {

	case *AccessLogFilter_RuntimeFilter:

		if h, ok := interface{}(m.GetRuntimeFilter()).(clone.Cloner); ok {
			target.FilterSpecifier = &AccessLogFilter_RuntimeFilter{
				RuntimeFilter: h.Clone().(*RuntimeFilter),
			}
		} else {
			target.FilterSpecifier = &AccessLogFilter_RuntimeFilter{
				RuntimeFilter: proto.Clone(m.GetRuntimeFilter()).(*RuntimeFilter),
			}
		}

	}

	return target
}

// Clone function
func (m *RuntimeFilter) Clone() proto.Message {
	var target *RuntimeFilter
	if m == nil {
		return target
	}
	target = &RuntimeFilter{}

	target.RuntimeKey = m.GetRuntimeKey()

	if h, ok := interface{}(m.GetPercentSampled()).(clone.Cloner); ok {
		target.PercentSampled = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_type_v3.FractionalPercent)
	} else {
		target.PercentSampled = proto.Clone(m.GetPercentSampled()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_type_v3.FractionalPercent)
	}

	target.UseIndependentRandomness = m.GetUseIndependentRandomness()

	return target
}
